{"ast":null,"code":"import * as i3 from '@ngrx/store';\nimport { compose, ScannedActionsSubject, createAction, ROOT_STORE_PROVIDER, FEATURE_STATE_PROVIDER, Store } from '@ngrx/store';\nimport * as i1 from 'rxjs';\nimport { merge, Observable, Subject, defer, pipe, of } from 'rxjs';\nimport { ignoreElements, materialize, map, catchError, filter, groupBy, mergeMap, exhaustMap, dematerialize, take, concatMap, finalize, withLatestFrom } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, NgModule, Optional, Injector, SkipSelf, Self, ENVIRONMENT_INITIALIZER, inject, InjectFlags } from '@angular/core';\nconst DEFAULT_EFFECT_CONFIG = {\n  dispatch: true,\n  useEffectsErrorHandler: true\n};\nconst CREATE_EFFECT_METADATA_KEY = '__@ngrx/effects_create__';\n\n/**\n * @description\n * Creates an effect from an `Observable` and an `EffectConfig`.\n *\n * @param source A function which returns an `Observable`.\n * @param config A `Partial<EffectConfig>` to configure the effect.  By default, `dispatch` is true and `useEffectsErrorHandler` is true.\n * @returns If `EffectConfig`#`dispatch` is true, returns `Observable<Action>`.  Else, returns `Observable<unknown>`.\n *\n * @usageNotes\n *\n * ** Mapping to a different action **\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(FeatureActions.actionOne),\n *     map(() => FeatureActions.actionTwo())\n *   )\n * );\n * ```\n *\n *  ** Non-dispatching effects **\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(FeatureActions.actionOne),\n *     tap(() => console.log('Action One Dispatched'))\n *   ),\n *   { dispatch: false }\n *   // FeatureActions.actionOne is not dispatched\n * );\n * ```\n */\nfunction createEffect(source, config) {\n  const effect = source();\n  const value = Object.assign(Object.assign({}, DEFAULT_EFFECT_CONFIG), config);\n  Object.defineProperty(effect, CREATE_EFFECT_METADATA_KEY, {\n    value\n  });\n  return effect;\n}\nfunction getCreateEffectMetadata(instance) {\n  const propertyNames = Object.getOwnPropertyNames(instance);\n  const metadata = propertyNames.filter(propertyName => {\n    if (instance[propertyName] && instance[propertyName].hasOwnProperty(CREATE_EFFECT_METADATA_KEY)) {\n      // If the property type has overridden `hasOwnProperty` we need to ensure\n      // that the metadata is valid (containing a `dispatch` property)\n      // https://github.com/ngrx/platform/issues/2975\n      const property = instance[propertyName];\n      return property[CREATE_EFFECT_METADATA_KEY].hasOwnProperty('dispatch');\n    }\n    return false;\n  }).map(propertyName => {\n    const metaData = instance[propertyName][CREATE_EFFECT_METADATA_KEY];\n    return Object.assign({\n      propertyName\n    }, metaData);\n  });\n  return metadata;\n}\nfunction getSourceForInstance(instance) {\n  return Object.getPrototypeOf(instance);\n}\nconst METADATA_KEY = '__@ngrx/effects__';\n/**\n * @deprecated The Effect decorator (`@Effect`) is deprecated in favor for the `createEffect` method.\n * See the docs for more info {@link https://ngrx.io/guide/migration/v11#the-effect-decorator}\n */\nfunction Effect(config = {}) {\n  return function (target, propertyName) {\n    const metadata = Object.assign(Object.assign(Object.assign({}, DEFAULT_EFFECT_CONFIG), config), {\n      propertyName\n    });\n    addEffectMetadataEntry(target, metadata);\n  };\n}\nfunction getEffectDecoratorMetadata(instance) {\n  const effectsDecorators = compose(getEffectMetadataEntries, getSourceForInstance)(instance);\n  return effectsDecorators;\n}\n/**\n * Type guard to detemine whether METADATA_KEY is already present on the Class\n * constructor\n */\nfunction hasMetadataEntries(sourceProto) {\n  return sourceProto.constructor.hasOwnProperty(METADATA_KEY);\n}\n/** Add Effect Metadata to the Effect Class constructor under specific key */\nfunction addEffectMetadataEntry(sourceProto, metadata) {\n  if (hasMetadataEntries(sourceProto)) {\n    sourceProto.constructor[METADATA_KEY].push(metadata);\n  } else {\n    Object.defineProperty(sourceProto.constructor, METADATA_KEY, {\n      value: [metadata]\n    });\n  }\n}\nfunction getEffectMetadataEntries(sourceProto) {\n  return hasMetadataEntries(sourceProto) ? sourceProto.constructor[METADATA_KEY] : [];\n}\nfunction getEffectsMetadata(instance) {\n  return getSourceMetadata(instance).reduce((acc, {\n    propertyName,\n    dispatch,\n    useEffectsErrorHandler\n  }) => {\n    acc[propertyName] = {\n      dispatch,\n      useEffectsErrorHandler\n    };\n    return acc;\n  }, {});\n}\nfunction getSourceMetadata(instance) {\n  const effects = [getEffectDecoratorMetadata, getCreateEffectMetadata];\n  return effects.reduce((sources, source) => sources.concat(source(instance)), []);\n}\nfunction mergeEffects(sourceInstance, globalErrorHandler, effectsErrorHandler) {\n  const sourceName = getSourceForInstance(sourceInstance).constructor.name;\n  const observables$ = getSourceMetadata(sourceInstance).map(({\n    propertyName,\n    dispatch,\n    useEffectsErrorHandler\n  }) => {\n    const observable$ = typeof sourceInstance[propertyName] === 'function' ? sourceInstance[propertyName]() : sourceInstance[propertyName];\n    const effectAction$ = useEffectsErrorHandler ? effectsErrorHandler(observable$, globalErrorHandler) : observable$;\n    if (dispatch === false) {\n      return effectAction$.pipe(ignoreElements());\n    }\n    const materialized$ = effectAction$.pipe(materialize());\n    return materialized$.pipe(map(notification => ({\n      effect: sourceInstance[propertyName],\n      notification,\n      propertyName,\n      sourceName,\n      sourceInstance\n    })));\n  });\n  return merge(...observables$);\n}\nconst MAX_NUMBER_OF_RETRY_ATTEMPTS = 10;\nfunction defaultEffectsErrorHandler(observable$, errorHandler, retryAttemptLeft = MAX_NUMBER_OF_RETRY_ATTEMPTS) {\n  return observable$.pipe(catchError(error => {\n    if (errorHandler) errorHandler.handleError(error);\n    if (retryAttemptLeft <= 1) {\n      return observable$; // last attempt\n    }\n    // Return observable that produces this particular effect\n    return defaultEffectsErrorHandler(observable$, errorHandler, retryAttemptLeft - 1);\n  }));\n}\nclass Actions extends Observable {\n  constructor(source) {\n    super();\n    if (source) {\n      this.source = source;\n    }\n  }\n  lift(operator) {\n    const observable = new Actions();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n}\n/** @nocollapse */\nActions.ɵfac = function Actions_Factory(t) {\n  return new (t || Actions)(i0.ɵɵinject(ScannedActionsSubject));\n};\n/** @nocollapse */\nActions.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Actions,\n  factory: Actions.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Actions, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.Observable,\n      decorators: [{\n        type: Inject,\n        args: [ScannedActionsSubject]\n      }]\n    }];\n  }, null);\n})();\n/**\n * `ofType` filters an Observable of `Actions` into an Observable of the actions\n * whose type strings are passed to it.\n *\n * For example, if `actions` has type `Actions<AdditionAction|SubstractionAction>`, and\n * the type of the `Addition` action is `add`, then\n * `actions.pipe(ofType('add'))` returns an `Observable<AdditionAction>`.\n *\n * Properly typing this function is hard and requires some advanced TS tricks\n * below.\n *\n * Type narrowing automatically works, as long as your `actions` object\n * starts with a `Actions<SomeUnionOfActions>` instead of generic `Actions`.\n *\n * For backwards compatibility, when one passes a single type argument\n * `ofType<T>('something')` the result is an `Observable<T>`. Note, that `T`\n * completely overrides any possible inference from 'something'.\n *\n * Unfortunately, for unknown 'actions: Actions' these types will produce\n * 'Observable<never>'. In such cases one has to manually set the generic type\n * like `actions.ofType<AdditionAction>('add')`.\n *\n * @usageNotes\n *\n * Filter the Actions stream on the \"customers page loaded\" action\n *\n * ```ts\n * import { ofType } from '@ngrx/effects';\n * import * fromCustomers from '../customers';\n *\n * this.actions$.pipe(\n *  ofType(fromCustomers.pageLoaded)\n * )\n * ```\n */\nfunction ofType(...allowedTypes) {\n  return filter(action => allowedTypes.some(typeOrActionCreator => {\n    if (typeof typeOrActionCreator === 'string') {\n      // Comparing the string to type\n      return typeOrActionCreator === action.type;\n    }\n    // We are filtering by ActionCreator\n    return typeOrActionCreator.type === action.type;\n  }));\n}\nconst _ROOT_EFFECTS_GUARD = new InjectionToken('@ngrx/effects Internal Root Guard');\nconst USER_PROVIDED_EFFECTS = new InjectionToken('@ngrx/effects User Provided Effects');\nconst _ROOT_EFFECTS = new InjectionToken('@ngrx/effects Internal Root Effects');\nconst ROOT_EFFECTS = new InjectionToken('@ngrx/effects Root Effects');\nconst _FEATURE_EFFECTS = new InjectionToken('@ngrx/effects Internal Feature Effects');\nconst FEATURE_EFFECTS = new InjectionToken('@ngrx/effects Feature Effects');\nconst EFFECTS_ERROR_HANDLER = new InjectionToken('@ngrx/effects Effects Error Handler', {\n  providedIn: 'root',\n  factory: () => defaultEffectsErrorHandler\n});\nconst ROOT_EFFECTS_INIT = '@ngrx/effects/init';\nconst rootEffectsInit = createAction(ROOT_EFFECTS_INIT);\nfunction reportInvalidActions(output, reporter) {\n  if (output.notification.kind === 'N') {\n    const action = output.notification.value;\n    const isInvalidAction = !isAction(action);\n    if (isInvalidAction) {\n      reporter.handleError(new Error(`Effect ${getEffectName(output)} dispatched an invalid action: ${stringify(action)}`));\n    }\n  }\n}\nfunction isAction(action) {\n  return typeof action !== 'function' && action && action.type && typeof action.type === 'string';\n}\nfunction getEffectName({\n  propertyName,\n  sourceInstance,\n  sourceName\n}) {\n  const isMethod = typeof sourceInstance[propertyName] === 'function';\n  return `\"${sourceName}.${String(propertyName)}${isMethod ? '()' : ''}\"`;\n}\nfunction stringify(action) {\n  try {\n    return JSON.stringify(action);\n  } catch (_a) {\n    return action;\n  }\n}\nconst onIdentifyEffectsKey = 'ngrxOnIdentifyEffects';\nfunction isOnIdentifyEffects(instance) {\n  return isFunction(instance, onIdentifyEffectsKey);\n}\nconst onRunEffectsKey = 'ngrxOnRunEffects';\nfunction isOnRunEffects(instance) {\n  return isFunction(instance, onRunEffectsKey);\n}\nconst onInitEffects = 'ngrxOnInitEffects';\nfunction isOnInitEffects(instance) {\n  return isFunction(instance, onInitEffects);\n}\nfunction isFunction(instance, functionName) {\n  return instance && functionName in instance && typeof instance[functionName] === 'function';\n}\nclass EffectSources extends Subject {\n  constructor(errorHandler, effectsErrorHandler) {\n    super();\n    this.errorHandler = errorHandler;\n    this.effectsErrorHandler = effectsErrorHandler;\n  }\n  addEffects(effectSourceInstance) {\n    this.next(effectSourceInstance);\n  }\n  /**\n   * @internal\n   */\n  toActions() {\n    return this.pipe(groupBy(getSourceForInstance), mergeMap(source$ => {\n      return source$.pipe(groupBy(effectsInstance));\n    }), mergeMap(source$ => {\n      const effect$ = source$.pipe(exhaustMap(sourceInstance => {\n        return resolveEffectSource(this.errorHandler, this.effectsErrorHandler)(sourceInstance);\n      }), map(output => {\n        reportInvalidActions(output, this.errorHandler);\n        return output.notification;\n      }), filter(notification => notification.kind === 'N' && notification.value != null), dematerialize());\n      // start the stream with an INIT action\n      // do this only for the first Effect instance\n      const init$ = source$.pipe(take(1), filter(isOnInitEffects), map(instance => instance.ngrxOnInitEffects()));\n      return merge(effect$, init$);\n    }));\n  }\n}\n/** @nocollapse */\nEffectSources.ɵfac = function EffectSources_Factory(t) {\n  return new (t || EffectSources)(i0.ɵɵinject(i0.ErrorHandler), i0.ɵɵinject(EFFECTS_ERROR_HANDLER));\n};\n/** @nocollapse */\nEffectSources.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: EffectSources,\n  factory: EffectSources.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EffectSources, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.ErrorHandler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [EFFECTS_ERROR_HANDLER]\n      }]\n    }];\n  }, null);\n})();\nfunction effectsInstance(sourceInstance) {\n  if (isOnIdentifyEffects(sourceInstance)) {\n    return sourceInstance.ngrxOnIdentifyEffects();\n  }\n  return '';\n}\nfunction resolveEffectSource(errorHandler, effectsErrorHandler) {\n  return sourceInstance => {\n    const mergedEffects$ = mergeEffects(sourceInstance, errorHandler, effectsErrorHandler);\n    if (isOnRunEffects(sourceInstance)) {\n      return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n    }\n    return mergedEffects$;\n  };\n}\nclass EffectsRunner {\n  constructor(effectSources, store) {\n    this.effectSources = effectSources;\n    this.store = store;\n    this.effectsSubscription = null;\n  }\n  get isStarted() {\n    return !!this.effectsSubscription;\n  }\n  start() {\n    if (!this.effectsSubscription) {\n      this.effectsSubscription = this.effectSources.toActions().subscribe(this.store);\n    }\n  }\n  ngOnDestroy() {\n    if (this.effectsSubscription) {\n      this.effectsSubscription.unsubscribe();\n      this.effectsSubscription = null;\n    }\n  }\n}\n/** @nocollapse */\nEffectsRunner.ɵfac = function EffectsRunner_Factory(t) {\n  return new (t || EffectsRunner)(i0.ɵɵinject(EffectSources), i0.ɵɵinject(i3.Store));\n};\n/** @nocollapse */\nEffectsRunner.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: EffectsRunner,\n  factory: EffectsRunner.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EffectsRunner, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: EffectSources\n    }, {\n      type: i3.Store\n    }];\n  }, null);\n})();\nclass EffectsRootModule {\n  constructor(sources, runner, store, rootEffects, storeRootModule, storeFeatureModule, guard) {\n    this.sources = sources;\n    runner.start();\n    rootEffects.forEach(effectSourceInstance => sources.addEffects(effectSourceInstance));\n    store.dispatch({\n      type: ROOT_EFFECTS_INIT\n    });\n  }\n  addEffects(effectSourceInstance) {\n    this.sources.addEffects(effectSourceInstance);\n  }\n}\n/** @nocollapse */\nEffectsRootModule.ɵfac = function EffectsRootModule_Factory(t) {\n  return new (t || EffectsRootModule)(i0.ɵɵinject(EffectSources), i0.ɵɵinject(EffectsRunner), i0.ɵɵinject(i3.Store), i0.ɵɵinject(ROOT_EFFECTS), i0.ɵɵinject(i3.StoreRootModule, 8), i0.ɵɵinject(i3.StoreFeatureModule, 8), i0.ɵɵinject(_ROOT_EFFECTS_GUARD, 8));\n};\n/** @nocollapse */\nEffectsRootModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: EffectsRootModule\n});\n/** @nocollapse */\nEffectsRootModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EffectsRootModule, [{\n    type: NgModule,\n    args: [{}]\n  }], function () {\n    return [{\n      type: EffectSources\n    }, {\n      type: EffectsRunner\n    }, {\n      type: i3.Store\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [ROOT_EFFECTS]\n      }]\n    }, {\n      type: i3.StoreRootModule,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3.StoreFeatureModule,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [_ROOT_EFFECTS_GUARD]\n      }]\n    }];\n  }, null);\n})();\nclass EffectsFeatureModule {\n  constructor(root, effectSourceGroups, storeRootModule, storeFeatureModule) {\n    effectSourceGroups.forEach(group => group.forEach(effectSourceInstance => root.addEffects(effectSourceInstance)));\n  }\n}\n/** @nocollapse */\nEffectsFeatureModule.ɵfac = function EffectsFeatureModule_Factory(t) {\n  return new (t || EffectsFeatureModule)(i0.ɵɵinject(EffectsRootModule), i0.ɵɵinject(FEATURE_EFFECTS), i0.ɵɵinject(i3.StoreRootModule, 8), i0.ɵɵinject(i3.StoreFeatureModule, 8));\n};\n/** @nocollapse */\nEffectsFeatureModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: EffectsFeatureModule\n});\n/** @nocollapse */\nEffectsFeatureModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EffectsFeatureModule, [{\n    type: NgModule,\n    args: [{}]\n  }], function () {\n    return [{\n      type: EffectsRootModule\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [FEATURE_EFFECTS]\n      }]\n    }, {\n      type: i3.StoreRootModule,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3.StoreFeatureModule,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\nclass EffectsModule {\n  static forFeature(featureEffects = []) {\n    return {\n      ngModule: EffectsFeatureModule,\n      providers: [featureEffects, {\n        provide: _FEATURE_EFFECTS,\n        multi: true,\n        useValue: featureEffects\n      }, {\n        provide: USER_PROVIDED_EFFECTS,\n        multi: true,\n        useValue: []\n      }, {\n        provide: FEATURE_EFFECTS,\n        multi: true,\n        useFactory: createEffects,\n        deps: [Injector, _FEATURE_EFFECTS, USER_PROVIDED_EFFECTS]\n      }]\n    };\n  }\n  static forRoot(rootEffects = []) {\n    return {\n      ngModule: EffectsRootModule,\n      providers: [rootEffects, {\n        provide: _ROOT_EFFECTS,\n        useValue: [rootEffects]\n      }, {\n        provide: _ROOT_EFFECTS_GUARD,\n        useFactory: _provideForRootGuard,\n        deps: [[EffectsRunner, new Optional(), new SkipSelf()], [_ROOT_EFFECTS, new Self()]]\n      }, {\n        provide: USER_PROVIDED_EFFECTS,\n        multi: true,\n        useValue: []\n      }, {\n        provide: ROOT_EFFECTS,\n        useFactory: createEffects,\n        deps: [Injector, _ROOT_EFFECTS, USER_PROVIDED_EFFECTS]\n      }]\n    };\n  }\n}\n/** @nocollapse */\nEffectsModule.ɵfac = function EffectsModule_Factory(t) {\n  return new (t || EffectsModule)();\n};\n/** @nocollapse */\nEffectsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: EffectsModule\n});\n/** @nocollapse */\nEffectsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EffectsModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\nfunction createEffects(injector, effectGroups, userProvidedEffectGroups) {\n  const mergedEffects = [];\n  for (const effectGroup of effectGroups) {\n    mergedEffects.push(...effectGroup);\n  }\n  for (const userProvidedEffectGroup of userProvidedEffectGroups) {\n    mergedEffects.push(...userProvidedEffectGroup);\n  }\n  return createEffectInstances(injector, mergedEffects);\n}\nfunction createEffectInstances(injector, effects) {\n  return effects.map(effect => injector.get(effect));\n}\nfunction _provideForRootGuard(runner, rootEffects) {\n  // check whether any effects are actually passed\n  const hasEffects = !(rootEffects.length === 1 && rootEffects[0].length === 0);\n  if (hasEffects && runner) {\n    throw new TypeError(`EffectsModule.forRoot() called twice. Feature modules should use EffectsModule.forFeature() instead.`);\n  }\n  return 'guarded';\n}\n\n/**\n * Wraps project fn with error handling making it safe to use in Effects.\n * Takes either a config with named properties that represent different possible\n * callbacks or project/error callbacks that are required.\n */\nfunction act( /** Allow to take either config object or project/error functions */\nconfigOrProject, errorFn) {\n  const {\n    project,\n    error,\n    complete,\n    operator,\n    unsubscribe\n  } = typeof configOrProject === 'function' ? {\n    project: configOrProject,\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    error: errorFn,\n    operator: concatMap,\n    complete: undefined,\n    unsubscribe: undefined\n  } : Object.assign(Object.assign({}, configOrProject), {\n    operator: configOrProject.operator || concatMap\n  });\n  return source => defer(() => {\n    const subject = new Subject();\n    return merge(source.pipe(operator((input, index) => defer(() => {\n      let completed = false;\n      let errored = false;\n      let projectedCount = 0;\n      return project(input, index).pipe(materialize(), map(notification => {\n        switch (notification.kind) {\n          case 'E':\n            errored = true;\n            return {\n              kind: 'N',\n              value: error(notification.error, input)\n            };\n          case 'C':\n            completed = true;\n            return complete ? {\n              kind: 'N',\n              value: complete(projectedCount, input)\n            } : undefined;\n          default:\n            ++projectedCount;\n            return notification;\n        }\n      }), filter(n => n != null), dematerialize(), finalize(() => {\n        if (!completed && !errored && unsubscribe) {\n          subject.next(unsubscribe(projectedCount, input));\n        }\n      }));\n    }))), subject);\n  });\n}\n\n/**\n * `concatLatestFrom` combines the source value\n * and the last available value from a lazily evaluated Observable\n * in a new array\n *\n * @usageNotes\n *\n * Select the active customer from the NgRx Store\n *\n * ```ts\n * import { concatLatestFrom } from '@ngrx/effects';\n * import * as fromCustomers from '../customers';\n *\n * this.actions$.pipe(\n *  concatLatestFrom(() => this.store.select(fromCustomers.selectActiveCustomer))\n * )\n * ```\n *\n * Select a customer from the NgRx Store by its id that is available on the action\n *\n * ```ts\n * import { concatLatestFrom } from '@ngrx/effects';\n * import * fromCustomers from '../customers';\n *\n * this.actions$.pipe(\n *  concatLatestFrom((action) => this.store.select(fromCustomers.selectCustomer(action.customerId)))\n * )\n * ```\n */\nfunction concatLatestFrom(observablesFactory) {\n  return pipe(concatMap(value => {\n    const observables = observablesFactory(value);\n    const observablesAsArray = Array.isArray(observables) ? observables : [observables];\n    return of(value).pipe(withLatestFrom(...observablesAsArray));\n  }));\n}\n\n/**\n * Runs the provided effects.\n * Can be called at the root and feature levels.\n *\n * @usageNotes\n *\n * ### Providing effects at the root level\n *\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideEffects([RouterEffects])],\n * });\n * ```\n *\n * ### Providing effects at the feature level\n *\n * ```ts\n * const booksRoutes: Route[] = [\n *   {\n *     path: '',\n *     providers: [provideEffects([BooksApiEffects])],\n *     children: [\n *       { path: '', component: BookListComponent },\n *       { path: ':id', component: BookDetailsComponent },\n *     ],\n *   },\n * ];\n * ```\n */\nfunction provideEffects(effects) {\n  return {\n    ɵproviders: [effects, {\n      provide: ENVIRONMENT_INITIALIZER,\n      multi: true,\n      useValue: () => {\n        inject(ROOT_STORE_PROVIDER);\n        inject(FEATURE_STATE_PROVIDER, InjectFlags.Optional);\n        const effectsRunner = inject(EffectsRunner);\n        const effectSources = inject(EffectSources);\n        const shouldInitEffects = !effectsRunner.isStarted;\n        if (shouldInitEffects) {\n          effectsRunner.start();\n        }\n        for (const effectsClass of effects) {\n          const effectsInstance = inject(effectsClass);\n          effectSources.addEffects(effectsInstance);\n        }\n        if (shouldInitEffects) {\n          const store = inject(Store);\n          store.dispatch(rootEffectsInit());\n        }\n      }\n    }]\n  };\n}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Actions, EFFECTS_ERROR_HANDLER, Effect, EffectSources, EffectsFeatureModule, EffectsModule, EffectsRootModule, EffectsRunner, ROOT_EFFECTS_INIT, USER_PROVIDED_EFFECTS, act, concatLatestFrom, createEffect, defaultEffectsErrorHandler, getEffectsMetadata, mergeEffects, ofType, provideEffects, rootEffectsInit };","map":{"version":3,"names":["i3","compose","ScannedActionsSubject","createAction","ROOT_STORE_PROVIDER","FEATURE_STATE_PROVIDER","Store","i1","merge","Observable","Subject","defer","pipe","of","ignoreElements","materialize","map","catchError","filter","groupBy","mergeMap","exhaustMap","dematerialize","take","concatMap","finalize","withLatestFrom","i0","Injectable","Inject","InjectionToken","NgModule","Optional","Injector","SkipSelf","Self","ENVIRONMENT_INITIALIZER","inject","InjectFlags","DEFAULT_EFFECT_CONFIG","dispatch","useEffectsErrorHandler","CREATE_EFFECT_METADATA_KEY","createEffect","source","config","effect","value","Object","assign","defineProperty","getCreateEffectMetadata","instance","propertyNames","getOwnPropertyNames","metadata","propertyName","hasOwnProperty","property","metaData","getSourceForInstance","getPrototypeOf","METADATA_KEY","Effect","target","addEffectMetadataEntry","getEffectDecoratorMetadata","effectsDecorators","getEffectMetadataEntries","hasMetadataEntries","sourceProto","constructor","push","getEffectsMetadata","getSourceMetadata","reduce","acc","effects","sources","concat","mergeEffects","sourceInstance","globalErrorHandler","effectsErrorHandler","sourceName","name","observables$","observable$","effectAction$","materialized$","notification","MAX_NUMBER_OF_RETRY_ATTEMPTS","defaultEffectsErrorHandler","errorHandler","retryAttemptLeft","error","handleError","Actions","lift","operator","observable","ɵfac","ɵprov","type","args","providedIn","decorators","ofType","allowedTypes","action","some","typeOrActionCreator","_ROOT_EFFECTS_GUARD","USER_PROVIDED_EFFECTS","_ROOT_EFFECTS","ROOT_EFFECTS","_FEATURE_EFFECTS","FEATURE_EFFECTS","EFFECTS_ERROR_HANDLER","factory","ROOT_EFFECTS_INIT","rootEffectsInit","reportInvalidActions","output","reporter","kind","isInvalidAction","isAction","Error","getEffectName","stringify","isMethod","String","JSON","_a","onIdentifyEffectsKey","isOnIdentifyEffects","isFunction","onRunEffectsKey","isOnRunEffects","onInitEffects","isOnInitEffects","functionName","EffectSources","addEffects","effectSourceInstance","next","toActions","source$","effectsInstance","effect$","resolveEffectSource","init$","ngrxOnInitEffects","ErrorHandler","undefined","ngrxOnIdentifyEffects","mergedEffects$","ngrxOnRunEffects","EffectsRunner","effectSources","store","effectsSubscription","isStarted","start","subscribe","ngOnDestroy","unsubscribe","EffectsRootModule","runner","rootEffects","storeRootModule","storeFeatureModule","guard","forEach","StoreRootModule","StoreFeatureModule","ɵmod","ɵinj","EffectsFeatureModule","root","effectSourceGroups","group","EffectsModule","forFeature","featureEffects","ngModule","providers","provide","multi","useValue","useFactory","createEffects","deps","forRoot","_provideForRootGuard","injector","effectGroups","userProvidedEffectGroups","mergedEffects","effectGroup","userProvidedEffectGroup","createEffectInstances","get","hasEffects","length","TypeError","act","configOrProject","errorFn","project","complete","subject","input","index","completed","errored","projectedCount","n","concatLatestFrom","observablesFactory","observables","observablesAsArray","Array","isArray","provideEffects","ɵproviders","effectsRunner","shouldInitEffects","effectsClass"],"sources":["C:/xampp/htdocs/calculatorNgrx/calculatorNgrx/node_modules/@ngrx/effects/fesm2015/ngrx-effects.mjs"],"sourcesContent":["import * as i3 from '@ngrx/store';\nimport { compose, ScannedActionsSubject, createAction, ROOT_STORE_PROVIDER, FEATURE_STATE_PROVIDER, Store } from '@ngrx/store';\nimport * as i1 from 'rxjs';\nimport { merge, Observable, Subject, defer, pipe, of } from 'rxjs';\nimport { ignoreElements, materialize, map, catchError, filter, groupBy, mergeMap, exhaustMap, dematerialize, take, concatMap, finalize, withLatestFrom } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, NgModule, Optional, Injector, SkipSelf, Self, ENVIRONMENT_INITIALIZER, inject, InjectFlags } from '@angular/core';\n\nconst DEFAULT_EFFECT_CONFIG = {\n    dispatch: true,\n    useEffectsErrorHandler: true,\n};\nconst CREATE_EFFECT_METADATA_KEY = '__@ngrx/effects_create__';\n\n/**\n * @description\n * Creates an effect from an `Observable` and an `EffectConfig`.\n *\n * @param source A function which returns an `Observable`.\n * @param config A `Partial<EffectConfig>` to configure the effect.  By default, `dispatch` is true and `useEffectsErrorHandler` is true.\n * @returns If `EffectConfig`#`dispatch` is true, returns `Observable<Action>`.  Else, returns `Observable<unknown>`.\n *\n * @usageNotes\n *\n * ** Mapping to a different action **\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(FeatureActions.actionOne),\n *     map(() => FeatureActions.actionTwo())\n *   )\n * );\n * ```\n *\n *  ** Non-dispatching effects **\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(FeatureActions.actionOne),\n *     tap(() => console.log('Action One Dispatched'))\n *   ),\n *   { dispatch: false }\n *   // FeatureActions.actionOne is not dispatched\n * );\n * ```\n */\nfunction createEffect(source, config) {\n    const effect = source();\n    const value = Object.assign(Object.assign({}, DEFAULT_EFFECT_CONFIG), config);\n    Object.defineProperty(effect, CREATE_EFFECT_METADATA_KEY, {\n        value,\n    });\n    return effect;\n}\nfunction getCreateEffectMetadata(instance) {\n    const propertyNames = Object.getOwnPropertyNames(instance);\n    const metadata = propertyNames\n        .filter((propertyName) => {\n        if (instance[propertyName] &&\n            instance[propertyName].hasOwnProperty(CREATE_EFFECT_METADATA_KEY)) {\n            // If the property type has overridden `hasOwnProperty` we need to ensure\n            // that the metadata is valid (containing a `dispatch` property)\n            // https://github.com/ngrx/platform/issues/2975\n            const property = instance[propertyName];\n            return property[CREATE_EFFECT_METADATA_KEY].hasOwnProperty('dispatch');\n        }\n        return false;\n    })\n        .map((propertyName) => {\n        const metaData = instance[propertyName][CREATE_EFFECT_METADATA_KEY];\n        return Object.assign({ propertyName }, metaData);\n    });\n    return metadata;\n}\n\nfunction getSourceForInstance(instance) {\n    return Object.getPrototypeOf(instance);\n}\n\nconst METADATA_KEY = '__@ngrx/effects__';\n/**\n * @deprecated The Effect decorator (`@Effect`) is deprecated in favor for the `createEffect` method.\n * See the docs for more info {@link https://ngrx.io/guide/migration/v11#the-effect-decorator}\n */\nfunction Effect(config = {}) {\n    return function (target, propertyName) {\n        const metadata = Object.assign(Object.assign(Object.assign({}, DEFAULT_EFFECT_CONFIG), config), { propertyName });\n        addEffectMetadataEntry(target, metadata);\n    };\n}\nfunction getEffectDecoratorMetadata(instance) {\n    const effectsDecorators = compose(getEffectMetadataEntries, getSourceForInstance)(instance);\n    return effectsDecorators;\n}\n/**\n * Type guard to detemine whether METADATA_KEY is already present on the Class\n * constructor\n */\nfunction hasMetadataEntries(sourceProto) {\n    return sourceProto.constructor.hasOwnProperty(METADATA_KEY);\n}\n/** Add Effect Metadata to the Effect Class constructor under specific key */\nfunction addEffectMetadataEntry(sourceProto, metadata) {\n    if (hasMetadataEntries(sourceProto)) {\n        sourceProto.constructor[METADATA_KEY].push(metadata);\n    }\n    else {\n        Object.defineProperty(sourceProto.constructor, METADATA_KEY, {\n            value: [metadata],\n        });\n    }\n}\nfunction getEffectMetadataEntries(sourceProto) {\n    return hasMetadataEntries(sourceProto)\n        ? sourceProto.constructor[METADATA_KEY]\n        : [];\n}\n\nfunction getEffectsMetadata(instance) {\n    return getSourceMetadata(instance).reduce((acc, { propertyName, dispatch, useEffectsErrorHandler }) => {\n        acc[propertyName] = { dispatch, useEffectsErrorHandler };\n        return acc;\n    }, {});\n}\nfunction getSourceMetadata(instance) {\n    const effects = [\n        getEffectDecoratorMetadata,\n        getCreateEffectMetadata,\n    ];\n    return effects.reduce((sources, source) => sources.concat(source(instance)), []);\n}\n\nfunction mergeEffects(sourceInstance, globalErrorHandler, effectsErrorHandler) {\n    const sourceName = getSourceForInstance(sourceInstance).constructor.name;\n    const observables$ = getSourceMetadata(sourceInstance).map(({ propertyName, dispatch, useEffectsErrorHandler, }) => {\n        const observable$ = typeof sourceInstance[propertyName] === 'function'\n            ? sourceInstance[propertyName]()\n            : sourceInstance[propertyName];\n        const effectAction$ = useEffectsErrorHandler\n            ? effectsErrorHandler(observable$, globalErrorHandler)\n            : observable$;\n        if (dispatch === false) {\n            return effectAction$.pipe(ignoreElements());\n        }\n        const materialized$ = effectAction$.pipe(materialize());\n        return materialized$.pipe(map((notification) => ({\n            effect: sourceInstance[propertyName],\n            notification,\n            propertyName,\n            sourceName,\n            sourceInstance,\n        })));\n    });\n    return merge(...observables$);\n}\n\nconst MAX_NUMBER_OF_RETRY_ATTEMPTS = 10;\nfunction defaultEffectsErrorHandler(observable$, errorHandler, retryAttemptLeft = MAX_NUMBER_OF_RETRY_ATTEMPTS) {\n    return observable$.pipe(catchError((error) => {\n        if (errorHandler)\n            errorHandler.handleError(error);\n        if (retryAttemptLeft <= 1) {\n            return observable$; // last attempt\n        }\n        // Return observable that produces this particular effect\n        return defaultEffectsErrorHandler(observable$, errorHandler, retryAttemptLeft - 1);\n    }));\n}\n\nclass Actions extends Observable {\n    constructor(source) {\n        super();\n        if (source) {\n            this.source = source;\n        }\n    }\n    lift(operator) {\n        const observable = new Actions();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    }\n}\n/** @nocollapse */ Actions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.2\", ngImport: i0, type: Actions, deps: [{ token: ScannedActionsSubject }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ Actions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.2\", ngImport: i0, type: Actions, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.2\", ngImport: i0, type: Actions, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i1.Observable, decorators: [{\n                        type: Inject,\n                        args: [ScannedActionsSubject]\n                    }] }];\n    } });\n/**\n * `ofType` filters an Observable of `Actions` into an Observable of the actions\n * whose type strings are passed to it.\n *\n * For example, if `actions` has type `Actions<AdditionAction|SubstractionAction>`, and\n * the type of the `Addition` action is `add`, then\n * `actions.pipe(ofType('add'))` returns an `Observable<AdditionAction>`.\n *\n * Properly typing this function is hard and requires some advanced TS tricks\n * below.\n *\n * Type narrowing automatically works, as long as your `actions` object\n * starts with a `Actions<SomeUnionOfActions>` instead of generic `Actions`.\n *\n * For backwards compatibility, when one passes a single type argument\n * `ofType<T>('something')` the result is an `Observable<T>`. Note, that `T`\n * completely overrides any possible inference from 'something'.\n *\n * Unfortunately, for unknown 'actions: Actions' these types will produce\n * 'Observable<never>'. In such cases one has to manually set the generic type\n * like `actions.ofType<AdditionAction>('add')`.\n *\n * @usageNotes\n *\n * Filter the Actions stream on the \"customers page loaded\" action\n *\n * ```ts\n * import { ofType } from '@ngrx/effects';\n * import * fromCustomers from '../customers';\n *\n * this.actions$.pipe(\n *  ofType(fromCustomers.pageLoaded)\n * )\n * ```\n */\nfunction ofType(...allowedTypes) {\n    return filter((action) => allowedTypes.some((typeOrActionCreator) => {\n        if (typeof typeOrActionCreator === 'string') {\n            // Comparing the string to type\n            return typeOrActionCreator === action.type;\n        }\n        // We are filtering by ActionCreator\n        return typeOrActionCreator.type === action.type;\n    }));\n}\n\nconst _ROOT_EFFECTS_GUARD = new InjectionToken('@ngrx/effects Internal Root Guard');\nconst USER_PROVIDED_EFFECTS = new InjectionToken('@ngrx/effects User Provided Effects');\nconst _ROOT_EFFECTS = new InjectionToken('@ngrx/effects Internal Root Effects');\nconst ROOT_EFFECTS = new InjectionToken('@ngrx/effects Root Effects');\nconst _FEATURE_EFFECTS = new InjectionToken('@ngrx/effects Internal Feature Effects');\nconst FEATURE_EFFECTS = new InjectionToken('@ngrx/effects Feature Effects');\nconst EFFECTS_ERROR_HANDLER = new InjectionToken('@ngrx/effects Effects Error Handler', { providedIn: 'root', factory: () => defaultEffectsErrorHandler });\n\nconst ROOT_EFFECTS_INIT = '@ngrx/effects/init';\nconst rootEffectsInit = createAction(ROOT_EFFECTS_INIT);\n\nfunction reportInvalidActions(output, reporter) {\n    if (output.notification.kind === 'N') {\n        const action = output.notification.value;\n        const isInvalidAction = !isAction(action);\n        if (isInvalidAction) {\n            reporter.handleError(new Error(`Effect ${getEffectName(output)} dispatched an invalid action: ${stringify(action)}`));\n        }\n    }\n}\nfunction isAction(action) {\n    return (typeof action !== 'function' &&\n        action &&\n        action.type &&\n        typeof action.type === 'string');\n}\nfunction getEffectName({ propertyName, sourceInstance, sourceName, }) {\n    const isMethod = typeof sourceInstance[propertyName] === 'function';\n    return `\"${sourceName}.${String(propertyName)}${isMethod ? '()' : ''}\"`;\n}\nfunction stringify(action) {\n    try {\n        return JSON.stringify(action);\n    }\n    catch (_a) {\n        return action;\n    }\n}\n\nconst onIdentifyEffectsKey = 'ngrxOnIdentifyEffects';\nfunction isOnIdentifyEffects(instance) {\n    return isFunction(instance, onIdentifyEffectsKey);\n}\nconst onRunEffectsKey = 'ngrxOnRunEffects';\nfunction isOnRunEffects(instance) {\n    return isFunction(instance, onRunEffectsKey);\n}\nconst onInitEffects = 'ngrxOnInitEffects';\nfunction isOnInitEffects(instance) {\n    return isFunction(instance, onInitEffects);\n}\nfunction isFunction(instance, functionName) {\n    return (instance &&\n        functionName in instance &&\n        typeof instance[functionName] === 'function');\n}\n\nclass EffectSources extends Subject {\n    constructor(errorHandler, effectsErrorHandler) {\n        super();\n        this.errorHandler = errorHandler;\n        this.effectsErrorHandler = effectsErrorHandler;\n    }\n    addEffects(effectSourceInstance) {\n        this.next(effectSourceInstance);\n    }\n    /**\n     * @internal\n     */\n    toActions() {\n        return this.pipe(groupBy(getSourceForInstance), mergeMap((source$) => {\n            return source$.pipe(groupBy(effectsInstance));\n        }), mergeMap((source$) => {\n            const effect$ = source$.pipe(exhaustMap((sourceInstance) => {\n                return resolveEffectSource(this.errorHandler, this.effectsErrorHandler)(sourceInstance);\n            }), map((output) => {\n                reportInvalidActions(output, this.errorHandler);\n                return output.notification;\n            }), filter((notification) => notification.kind === 'N' && notification.value != null), dematerialize());\n            // start the stream with an INIT action\n            // do this only for the first Effect instance\n            const init$ = source$.pipe(take(1), filter(isOnInitEffects), map((instance) => instance.ngrxOnInitEffects()));\n            return merge(effect$, init$);\n        }));\n    }\n}\n/** @nocollapse */ EffectSources.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.2\", ngImport: i0, type: EffectSources, deps: [{ token: i0.ErrorHandler }, { token: EFFECTS_ERROR_HANDLER }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ EffectSources.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.2\", ngImport: i0, type: EffectSources, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.2\", ngImport: i0, type: EffectSources, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ErrorHandler }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [EFFECTS_ERROR_HANDLER]\n                    }] }];\n    } });\nfunction effectsInstance(sourceInstance) {\n    if (isOnIdentifyEffects(sourceInstance)) {\n        return sourceInstance.ngrxOnIdentifyEffects();\n    }\n    return '';\n}\nfunction resolveEffectSource(errorHandler, effectsErrorHandler) {\n    return (sourceInstance) => {\n        const mergedEffects$ = mergeEffects(sourceInstance, errorHandler, effectsErrorHandler);\n        if (isOnRunEffects(sourceInstance)) {\n            return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n        }\n        return mergedEffects$;\n    };\n}\n\nclass EffectsRunner {\n    constructor(effectSources, store) {\n        this.effectSources = effectSources;\n        this.store = store;\n        this.effectsSubscription = null;\n    }\n    get isStarted() {\n        return !!this.effectsSubscription;\n    }\n    start() {\n        if (!this.effectsSubscription) {\n            this.effectsSubscription = this.effectSources\n                .toActions()\n                .subscribe(this.store);\n        }\n    }\n    ngOnDestroy() {\n        if (this.effectsSubscription) {\n            this.effectsSubscription.unsubscribe();\n            this.effectsSubscription = null;\n        }\n    }\n}\n/** @nocollapse */ EffectsRunner.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.2\", ngImport: i0, type: EffectsRunner, deps: [{ token: EffectSources }, { token: i3.Store }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ EffectsRunner.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.2\", ngImport: i0, type: EffectsRunner, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.2\", ngImport: i0, type: EffectsRunner, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: EffectSources }, { type: i3.Store }]; } });\n\nclass EffectsRootModule {\n    constructor(sources, runner, store, rootEffects, storeRootModule, storeFeatureModule, guard) {\n        this.sources = sources;\n        runner.start();\n        rootEffects.forEach((effectSourceInstance) => sources.addEffects(effectSourceInstance));\n        store.dispatch({ type: ROOT_EFFECTS_INIT });\n    }\n    addEffects(effectSourceInstance) {\n        this.sources.addEffects(effectSourceInstance);\n    }\n}\n/** @nocollapse */ EffectsRootModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.2\", ngImport: i0, type: EffectsRootModule, deps: [{ token: EffectSources }, { token: EffectsRunner }, { token: i3.Store }, { token: ROOT_EFFECTS }, { token: i3.StoreRootModule, optional: true }, { token: i3.StoreFeatureModule, optional: true }, { token: _ROOT_EFFECTS_GUARD, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ EffectsRootModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.2\", ngImport: i0, type: EffectsRootModule });\n/** @nocollapse */ EffectsRootModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.2\", ngImport: i0, type: EffectsRootModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.2\", ngImport: i0, type: EffectsRootModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }], ctorParameters: function () {\n        return [{ type: EffectSources }, { type: EffectsRunner }, { type: i3.Store }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [ROOT_EFFECTS]\n                    }] }, { type: i3.StoreRootModule, decorators: [{\n                        type: Optional\n                    }] }, { type: i3.StoreFeatureModule, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [_ROOT_EFFECTS_GUARD]\n                    }] }];\n    } });\n\nclass EffectsFeatureModule {\n    constructor(root, effectSourceGroups, storeRootModule, storeFeatureModule) {\n        effectSourceGroups.forEach((group) => group.forEach((effectSourceInstance) => root.addEffects(effectSourceInstance)));\n    }\n}\n/** @nocollapse */ EffectsFeatureModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.2\", ngImport: i0, type: EffectsFeatureModule, deps: [{ token: EffectsRootModule }, { token: FEATURE_EFFECTS }, { token: i3.StoreRootModule, optional: true }, { token: i3.StoreFeatureModule, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ EffectsFeatureModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.2\", ngImport: i0, type: EffectsFeatureModule });\n/** @nocollapse */ EffectsFeatureModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.2\", ngImport: i0, type: EffectsFeatureModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.2\", ngImport: i0, type: EffectsFeatureModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }], ctorParameters: function () {\n        return [{ type: EffectsRootModule }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [FEATURE_EFFECTS]\n                    }] }, { type: i3.StoreRootModule, decorators: [{\n                        type: Optional\n                    }] }, { type: i3.StoreFeatureModule, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\nclass EffectsModule {\n    static forFeature(featureEffects = []) {\n        return {\n            ngModule: EffectsFeatureModule,\n            providers: [\n                featureEffects,\n                {\n                    provide: _FEATURE_EFFECTS,\n                    multi: true,\n                    useValue: featureEffects,\n                },\n                {\n                    provide: USER_PROVIDED_EFFECTS,\n                    multi: true,\n                    useValue: [],\n                },\n                {\n                    provide: FEATURE_EFFECTS,\n                    multi: true,\n                    useFactory: createEffects,\n                    deps: [Injector, _FEATURE_EFFECTS, USER_PROVIDED_EFFECTS],\n                },\n            ],\n        };\n    }\n    static forRoot(rootEffects = []) {\n        return {\n            ngModule: EffectsRootModule,\n            providers: [\n                rootEffects,\n                {\n                    provide: _ROOT_EFFECTS,\n                    useValue: [rootEffects],\n                },\n                {\n                    provide: _ROOT_EFFECTS_GUARD,\n                    useFactory: _provideForRootGuard,\n                    deps: [\n                        [EffectsRunner, new Optional(), new SkipSelf()],\n                        [_ROOT_EFFECTS, new Self()],\n                    ],\n                },\n                {\n                    provide: USER_PROVIDED_EFFECTS,\n                    multi: true,\n                    useValue: [],\n                },\n                {\n                    provide: ROOT_EFFECTS,\n                    useFactory: createEffects,\n                    deps: [Injector, _ROOT_EFFECTS, USER_PROVIDED_EFFECTS],\n                },\n            ],\n        };\n    }\n}\n/** @nocollapse */ EffectsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.2\", ngImport: i0, type: EffectsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ EffectsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.2\", ngImport: i0, type: EffectsModule });\n/** @nocollapse */ EffectsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.2\", ngImport: i0, type: EffectsModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.2\", ngImport: i0, type: EffectsModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\nfunction createEffects(injector, effectGroups, userProvidedEffectGroups) {\n    const mergedEffects = [];\n    for (const effectGroup of effectGroups) {\n        mergedEffects.push(...effectGroup);\n    }\n    for (const userProvidedEffectGroup of userProvidedEffectGroups) {\n        mergedEffects.push(...userProvidedEffectGroup);\n    }\n    return createEffectInstances(injector, mergedEffects);\n}\nfunction createEffectInstances(injector, effects) {\n    return effects.map((effect) => injector.get(effect));\n}\nfunction _provideForRootGuard(runner, rootEffects) {\n    // check whether any effects are actually passed\n    const hasEffects = !(rootEffects.length === 1 && rootEffects[0].length === 0);\n    if (hasEffects && runner) {\n        throw new TypeError(`EffectsModule.forRoot() called twice. Feature modules should use EffectsModule.forFeature() instead.`);\n    }\n    return 'guarded';\n}\n\n/**\n * Wraps project fn with error handling making it safe to use in Effects.\n * Takes either a config with named properties that represent different possible\n * callbacks or project/error callbacks that are required.\n */\nfunction act(\n/** Allow to take either config object or project/error functions */\nconfigOrProject, errorFn) {\n    const { project, error, complete, operator, unsubscribe } = typeof configOrProject === 'function'\n        ? {\n            project: configOrProject,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            error: errorFn,\n            operator: concatMap,\n            complete: undefined,\n            unsubscribe: undefined,\n        }\n        : Object.assign(Object.assign({}, configOrProject), { operator: configOrProject.operator || concatMap });\n    return (source) => defer(() => {\n        const subject = new Subject();\n        return merge(source.pipe(operator((input, index) => defer(() => {\n            let completed = false;\n            let errored = false;\n            let projectedCount = 0;\n            return project(input, index).pipe(materialize(), map((notification) => {\n                switch (notification.kind) {\n                    case 'E':\n                        errored = true;\n                        return {\n                            kind: 'N',\n                            value: error(notification.error, input),\n                        };\n                    case 'C':\n                        completed = true;\n                        return complete\n                            ? {\n                                kind: 'N',\n                                value: complete(projectedCount, input),\n                            }\n                            : undefined;\n                    default:\n                        ++projectedCount;\n                        return notification;\n                }\n            }), filter((n) => n != null), dematerialize(), finalize(() => {\n                if (!completed && !errored && unsubscribe) {\n                    subject.next(unsubscribe(projectedCount, input));\n                }\n            }));\n        }))), subject);\n    });\n}\n\n/**\n * `concatLatestFrom` combines the source value\n * and the last available value from a lazily evaluated Observable\n * in a new array\n *\n * @usageNotes\n *\n * Select the active customer from the NgRx Store\n *\n * ```ts\n * import { concatLatestFrom } from '@ngrx/effects';\n * import * as fromCustomers from '../customers';\n *\n * this.actions$.pipe(\n *  concatLatestFrom(() => this.store.select(fromCustomers.selectActiveCustomer))\n * )\n * ```\n *\n * Select a customer from the NgRx Store by its id that is available on the action\n *\n * ```ts\n * import { concatLatestFrom } from '@ngrx/effects';\n * import * fromCustomers from '../customers';\n *\n * this.actions$.pipe(\n *  concatLatestFrom((action) => this.store.select(fromCustomers.selectCustomer(action.customerId)))\n * )\n * ```\n */\nfunction concatLatestFrom(observablesFactory) {\n    return pipe(concatMap((value) => {\n        const observables = observablesFactory(value);\n        const observablesAsArray = Array.isArray(observables)\n            ? observables\n            : [observables];\n        return of(value).pipe(withLatestFrom(...observablesAsArray));\n    }));\n}\n\n/**\n * Runs the provided effects.\n * Can be called at the root and feature levels.\n *\n * @usageNotes\n *\n * ### Providing effects at the root level\n *\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [provideEffects([RouterEffects])],\n * });\n * ```\n *\n * ### Providing effects at the feature level\n *\n * ```ts\n * const booksRoutes: Route[] = [\n *   {\n *     path: '',\n *     providers: [provideEffects([BooksApiEffects])],\n *     children: [\n *       { path: '', component: BookListComponent },\n *       { path: ':id', component: BookDetailsComponent },\n *     ],\n *   },\n * ];\n * ```\n */\nfunction provideEffects(effects) {\n    return {\n        ɵproviders: [\n            effects,\n            {\n                provide: ENVIRONMENT_INITIALIZER,\n                multi: true,\n                useValue: () => {\n                    inject(ROOT_STORE_PROVIDER);\n                    inject(FEATURE_STATE_PROVIDER, InjectFlags.Optional);\n                    const effectsRunner = inject(EffectsRunner);\n                    const effectSources = inject(EffectSources);\n                    const shouldInitEffects = !effectsRunner.isStarted;\n                    if (shouldInitEffects) {\n                        effectsRunner.start();\n                    }\n                    for (const effectsClass of effects) {\n                        const effectsInstance = inject(effectsClass);\n                        effectSources.addEffects(effectsInstance);\n                    }\n                    if (shouldInitEffects) {\n                        const store = inject(Store);\n                        store.dispatch(rootEffectsInit());\n                    }\n                },\n            },\n        ],\n    };\n}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Actions, EFFECTS_ERROR_HANDLER, Effect, EffectSources, EffectsFeatureModule, EffectsModule, EffectsRootModule, EffectsRunner, ROOT_EFFECTS_INIT, USER_PROVIDED_EFFECTS, act, concatLatestFrom, createEffect, defaultEffectsErrorHandler, getEffectsMetadata, mergeEffects, ofType, provideEffects, rootEffectsInit };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}